version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
          type: string
      when:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            echo "Destroy done"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      when:
        type: string       
    steps:
      - run:
          name: Revert migrations
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl --insecure https://kvdb.io/GjaC9nU9wy5YHGFsMYmuCs/migration_<< parameters.workflow_id >>)
            echo SUCCESS: "${SUCCESS}"
            pwd
            if (( $SUCCESS == 1 ));
            then
              echo 'Reverting migrations'
              cd ~/project/backend
              npm install
              npm run migration:revert
              echo 'Revert migrations done'
            fi
          when: << parameters.when >>
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
              cd frontend
              npm install
              npm run test
     
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
              cd backend
              npm install
              npm run test

            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
              cd frontend
              npm install
              npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
              cd backend
              npm install
              npm install oauth-sign@^0.9.0
              npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople 
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople 
            
      - run:
          name: Add backend ip to ansible inventory
          command: |
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
              --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" Name=instance-state-name,Values=running \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt

            # cd ..
            # export OldWorkflowID=$(aws cloudformation \
            #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            #             --no-paginate --output text) > OldWorkflowID.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            # - project/.circleci/OldWorkflowID.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cc:d5:85:5f:66:0d:11:86:07:ac:ac:b5:cd:68:18:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            # pip install awscli  
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/GjaC9nU9wy5YHGFsMYmuCs/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              curl --insecure https://kvdb.io/GjaC9nU9wy5YHGFsMYmuCs/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail    

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            yum install -y python3.7
            yum -y install curl
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            cd frontend
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" Name=instance-state-name,Values=running \
                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> .env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail     
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cc:d5:85:5f:66:0d:11:86:07:ac:ac:b5:cd:68:18:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs npm     
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli     
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                  --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" Name=instance-state-name,Values=running \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                  echo $BACKEND_IP
            # Fetch and prepare the BACKEND_IP env var
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail  

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum -y install tar gzip awscli curl npm nodejs
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowIDstack=$(aws cloudformation \
  #             list-exports --query "Exports[?Name=='WorkflowID'].Value" \
  #             --no-paginate --output text)
  #           OldWorkflowID=${OldWorkflowIDstack:10:7}
  #           echo ${OldWorkflowID} > oldId
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name InitialStack \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - ./oldId
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail 

  # cleanup:
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run: yum install -y tar gzip unzip
  #       - attach_workspace:
  #           at: .
  #       - run:
  #           name: Remove old stacks and files
  #           command: |
  #             pwd
  #             ls
  #             cat ./oldId
  #             OldWorkflowID=$(cat ./oldId)
  #             # export OldWorkflowID=$(cat ~/project/.circleci/OldWorkflowID.txt)
  #             echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
  #             echo OldWorkflowID: "${OldWorkflowID}"

  #             # Fetch the stack names
  #             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #                       --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #             echo Stack names: "${STACKS[@]}"

  #             if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
  #              then
  #               echo "Deleting"
  #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive 
  #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #               echo 'Clean up done'  
  #             else
  #               echo 'Clean up failed'
  #             fi
              

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]

      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [dev]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]